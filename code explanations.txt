How encdb extension works:
    at the beginning of every function, check whether global bool indicator status (default false) is set to true;
    if not, invoke initMultithreading process to create a background thread running for job queue & set status to true;
    if set, create a new request with the addresses of inputs & outputs;
    note: this background process c++ object is local to initMultithreading function in src/untrusted/interface/interface.cpp,
    hence only quit current psql client can terminate this thread; (Drop extension doesn't work);



Project Source Structure:
    untrusted:
        extensions: create psql extension functions, read encrypted inputs from SQL queries & calls functions in interface folder;
        interface: generate request, inqueue job queue, feed encrypted input values to functions defined in enclave folder, get encrypted output


PostgreSQL extension development:
    in PG, values are passed from / to pgsql as Datum (a generic wrapper for actual values, no type information);
	extension functions are dynamically loaded by the server on demand;
	The CREATE FUNCTION for a user-defined C function must  specify two pieces of information for the function:
	    the name of the loadable object file,
	    and the C name (link symbol) of the specific function to call within that object file.
	        If the C name is not explicitly specified then it is assumed to be the same as the SQL function name.
        if the function name is _PG_init, called immediately after loading the file; (when create extension xxx);
        if ... is _PG_fini, called immediately before unloading (unloads are disabled) the file;
    Datum func_name(PG_FUNCTION_ARGS): c declaration of an extension function; PG_FUNCTION_INFO_V1(func_name) macro call;
    postgres version of malloc & free: palloc & pfree, palloc automatically releases memory at the end of transaction;
    extension functions should be compiled as a shared library linking Position-Independent-Component object files.
        cc -fPIC -c xxx.c
        cc -shared -o xxx.so xxx.o
    then this .so file should be loaded in extension_name-version.sql files in AS xxx;

use a shared queue to deduce communication cost between enclaves and untrusted memory
    this queue maintains an int volatile variable to represent a lock;
    at the beginning of enqueue/dequeue process, a compare&swap is used to determine whether the lock is held by others;
    if held, __asm__(pause), system pause given in assembly language is used to hold to process;
    basic element: request, it contains:
        volatile int is_done to indicate work status;
        int resp to store error;
        int ocall_index to store the index of required operation;
        buffer to store the address of inputs & result


Authentication enclave

Preprocessor enclave

Operations enclave
    basic union datastructures, consists of data in real values in bytes;
        union: members share the same memory address, hence any updates on one of its members affect others as well &
            only one member can be accessed at a time;
    in every enclave operation function, use decrypt function to load input cipher values;
    after operations, reset all intermediate results to zero for security;